{"version":3,"file":"plasmic-intercom.cjs.production.min.js","sources":["../src/intercom.tsx","../src/index.tsx"],"sourcesContent":["import {\n  ComponentMeta,\n} from \"@plasmicapp/host\";\n\nimport { IntercomProvider as Provider } from 'react-use-intercom'\nimport React from \"react\";\n\nexport function ensure<T>(x: T | null | undefined): T {\n  if (x === null || x === undefined) {\n    debugger;\n    throw new Error(`Value must not be undefined or null`);\n  } else {\n    return x;\n  }\n}\n\nconst modulePath = \"@plasmicpkgs/plasmic-intercom\";\n\n\n\n\ninterface IntercomProviderProps {\n  appId?: string\n  autoBoot?: boolean,\n  buttonText?: string,\n  shouldInitialize?: boolean,\n  apiBase?: string,\n  initializeDelay?: number\n  className?: string;\n\n}\n\nexport const IntercomProviderMeta: ComponentMeta<IntercomProviderProps> = {\n  name: \"IntercomProvider\",\n  displayName: \"Intercom Provider\",\n  importName: \"IntercomProvider\",\n  importPath: modulePath,\n  providesData: true,\n\n  props: {\n    appId: {\n      type: \"string\",\n      displayName: \"App ID\",\n      description: \"ID of your workspace\"\n    },\n\n    shouldInitialize: {\n      type: \"boolean\",\n      displayName: \"Intercom Initialize\",\n      description: \"indicates if the Intercom should be initialized. Can be used in multistaged environment\"\n    },\n    initializeDelay: {\n      type: \"number\",\n      displayName: \"Delay\",\n      description: \"Indicates if the intercom initialization should be delayed, delay is in ms, defaults to 0\"\n\n    },\n    apiBase: {\n      type: \"string\",\n      displayName: \"Api Base\",\n      description: \"If you need to route your Messenger requests through a different endpoint than the default. Generally speaking, this is not need\"\n    }\n\n  },\n};\n\nexport function IntercomProvider({\n  apiBase,\n  shouldInitialize,\n  initializeDelay,\n  appId\n}: IntercomProviderProps) {\n\n  if (!appId) {\n    return <div>Please enter your APP ID</div>\n  }\n\n  return (\n    <Provider appId={appId!} autoBoot apiBase={apiBase} shouldInitialize={shouldInitialize} initializeDelay={initializeDelay}>\n    </Provider>\n  )\n}\n\n","import registerComponent, {\n  ComponentMeta,\n} from \"@plasmicapp/host/registerComponent\";\nimport registerGlobalContext from \"@plasmicapp/host/registerGlobalContext\";\nimport {\n  IntercomProvider,\n  IntercomProviderMeta,\n\n} from \"./intercom\";\n\nexport function registerAll(loader?: {\n  registerComponent: typeof registerComponent;\n  registerGlobalContext: typeof registerGlobalContext;\n}) {\n  const _registerComponent = <T extends React.ComponentType<any>>(\n    Component: T,\n    defaultMeta: ComponentMeta<React.ComponentProps<T>>\n  ) => {\n    if (loader) {\n      loader.registerComponent(Component, defaultMeta);\n    } else {\n      registerComponent(Component, defaultMeta);\n    }\n  };\n\n  if (loader) {\n    _registerComponent(IntercomProvider, IntercomProviderMeta);\n  }\n}\n\nexport * from \"./intercom\";\n"],"names":["IntercomProviderMeta","name","displayName","importName","importPath","providesData","props","appId","type","description","shouldInitialize","initializeDelay","apiBase","IntercomProvider","React","Provider","autoBoot","x","Error","loader","Component","defaultMeta","registerComponent"],"mappings":"uPAgCaA,EAA6D,CACxEC,KAAM,mBACNC,YAAa,oBACbC,WAAY,mBACZC,WApBiB,gCAqBjBC,cAAc,EAEdC,MAAO,CACLC,MAAO,CACLC,KAAM,SACNN,YAAa,SACbO,YAAa,wBAGfC,iBAAkB,CAChBF,KAAM,UACNN,YAAa,sBACbO,YAAa,2FAEfE,gBAAiB,CACfH,KAAM,SACNN,YAAa,QACbO,YAAa,6FAGfG,QAAS,CACPJ,KAAM,SACNN,YAAa,WACbO,YAAa,+IAMHI,SAIdN,IAAAA,MAGA,OAAKA,EAKHO,gBAACC,oBAASR,MAAOA,EAAQS,YAASJ,UAXpCA,QAWsDF,mBAVtDA,iBAU0FC,kBAT1FA,kBAKSG,yIAnEeG,GACxB,GAAIA,MAAAA,EAEF,MAAM,IAAIC,6CAEV,OAAOD,gCCFiBE,GAI1B,IACEC,EACAC,EASEF,IAVFC,EAWmBP,EAVnBQ,EAUqCrB,EARjCmB,EACFA,EAAOG,kBAAkBF,EAAWC,GAEpCC,EAAkBF,EAAWC"}