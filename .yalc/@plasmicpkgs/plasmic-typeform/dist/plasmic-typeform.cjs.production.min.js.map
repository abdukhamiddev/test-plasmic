{"version":3,"file":"plasmic-typeform.cjs.production.min.js","sources":["../src/typeform.tsx","../src/index.tsx"],"sourcesContent":["import { ComponentMeta } from \"@plasmicapp/host\";\n\nimport React from \"react\";\nimport { Widget } from \"@typeform/embed-react\";\nexport function ensure<T>(x: T | null | undefined): T {\n  if (x === null || x === undefined) {\n    debugger;\n    throw new Error(`Value must not be undefined or null`);\n  } else {\n    return x;\n  }\n}\n\nconst modulePath = \"@plasmicpkgs/plasmic-typeform\";\n\ninterface TypeformProps {\n  className?: string;\n  formId?: string;\n}\n\nexport const TypeformMeta: ComponentMeta<TypeformProps> = {\n  name: \"TypeForm\",\n  displayName: \"Typeform\",\n  importName: \"Typeform\",\n  importPath: modulePath,\n  providesData: true,\n  description: \"Embed Typeform on your website\",\n  defaultStyles: {\n    width: \"600px\",\n    height: \"700px\"\n  },\n  props: {\n    formId: {\n      type: \"string\",\n      displayName: \"Form ID\",\n      description: \"ID of your form in Typeform\",\n      defaultValue: \"R2s5BM\",\n      helpText:`You can find <form-id> from the public URL of your form. For example (https://form.typeform.com/to/<form-id>). Or from admin panel URL (https://admin.typeform.com/form/<form-id>/*)`\n    \n    },\n  },\n};\n\nexport function Typeform({ className, formId }: TypeformProps) {\n  if (!formId) {\n    return <div>Please specify a Form ID</div>;\n  }\n\n  return (\n\n    <div className={className}>\n      <Widget id={formId!} style={{ width: \"100%\", height: \"100%\" }} className={className} />\n    </div>\n\n\n  );\n}\n","import registerComponent, {\n  ComponentMeta,\n} from \"@plasmicapp/host/registerComponent\";\nimport registerGlobalContext from \"@plasmicapp/host/registerGlobalContext\";\nimport {\n  Typeform,\n  TypeformMeta,\n\n\n} from \"./typeform\";\n\n\nexport function registerAll(loader?: {\n  registerComponent: typeof registerComponent;\n  registerGlobalContext: typeof registerGlobalContext;\n}) {\n  const _registerComponent = <T extends React.ComponentType<any>>(\n    Component: T,\n    defaultMeta: ComponentMeta<React.ComponentProps<T>>\n  ) => {\n    if (loader) {\n      loader.registerComponent(Component, defaultMeta);\n    } else {\n      registerComponent(Component, defaultMeta);\n    }\n  };\n\n  if (loader) {\n\n    _registerComponent(Typeform, TypeformMeta);\n\n  }\n}\n\nexport * from \"./typeform\";"],"names":["TypeformMeta","name","displayName","importName","importPath","providesData","description","defaultStyles","width","height","props","formId","type","defaultValue","helpText","Typeform","className","React","Widget","id","style","x","Error","loader","Component","defaultMeta","registerComponent"],"mappings":"0PAoBaA,EAA6C,CACxDC,KAAM,WACNC,YAAa,WACbC,WAAY,WACZC,WAXiB,gCAYjBC,cAAc,EACdC,YAAa,iCACbC,cAAe,CACbC,MAAO,QACPC,OAAQ,SAEVC,MAAO,CACLC,OAAQ,CACNC,KAAM,SACNV,YAAa,UACbI,YAAa,8BACbO,aAAc,SACdC,4MAMUC,SAAWC,IAAAA,UAAWL,IAAAA,cAC/BA,EAMHM,uBAAKD,UAAWA,GACdC,gBAACC,UAAOC,GAAIR,EAASS,MAAO,CAAEZ,MAAO,OAAQC,OAAQ,QAAUO,UAAWA,KANrEC,yHAzCeI,MACpBA,MAAAA,QAEI,IAAIC,oDAEHD,gCCGiBE,OAKxBC,EACAC,EASEF,IAVFC,EAYmBT,EAXnBU,EAW6BzB,EATzBuB,EACFA,EAAOG,kBAAkBF,EAAWC,GAEpCC,EAAkBF,EAAWC"}