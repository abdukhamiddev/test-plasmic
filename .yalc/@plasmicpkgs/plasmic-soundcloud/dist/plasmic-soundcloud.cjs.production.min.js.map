{"version":3,"file":"plasmic-soundcloud.cjs.production.min.js","sources":["../src/soundcloud.tsx","../src/index.tsx"],"sourcesContent":["import { ComponentMeta ,usePlasmicCanvasContext} from \"@plasmicapp/host\";\n\nimport React from \"react\";\n\nexport function ensure<T>(x: T | null | undefined): T {\n  if (x === null || x === undefined) {\n    debugger;\n    throw new Error(`Value must not be undefined or null`);\n  } else {\n    return x;\n  }\n}\n\nconst modulePath = \"@plasmicpkgs/plasmic-soundcloud\";\n\ninterface SoundCloudProps {\n  url: string;\n  visual: boolean;\n  autoPlay: boolean;\n  color: string;\n  showComments: boolean;\n  showUser: boolean;\n  showRelated:boolean;\n  showTeaser:boolean;\n  className: string;\n}\n\nexport const SoundCloudMeta: ComponentMeta<SoundCloudProps> = {\n  name: \"SoundCloud\",\n  displayName: \"SoundCloud\",\n  importName: \"SoundCloud\",\n  importPath: modulePath,\n  providesData: true,\n  description: \"SoundCloud Player\",\n  props: {\n    url: {\n      type: \"string\",\n      displayName: \"URL\",\n      description: \"Track URL\",\n      defaultValue:\n        \"https://soundcloud.com/vautdiscovery/ed-sheeran-thinking-out-loud-live-on-jools-holland\",\n    },\n    visual: {\n      type: \"boolean\",\n      displayName: \"Visual\",\n      description: \"Visual or Classic player\",\n      defaultValue:true\n    },\n    autoPlay: {\n      type: \"boolean\",\n      displayName: \"AutoPlay\",\n      description: \"AutoPlay track\",\n      defaultValue: false,\n    },\n    color: {\n      type: \"color\",\n      displayName: \"Color\",\n      description: \"Widget color,should be in hex format\",\n      noDeref:false\n    },\n    showUser: {\n      type: \"boolean\",\n      displayName: \"Author\",\n      description: \"Show/Hide the uploader name\",\n      defaultValue: false,\n    },\n    showRelated: {\n      type: \"boolean\",\n      displayName: \"Related\",\n      description: \"Show/Hide related songs\",\n      defaultValue: false,\n    },\n    showTeaser: {\n      type: \"boolean\",\n      displayName: \"Teaser\",\n      description: \"Show/Hide the teaser\",\n      defaultValue: false,\n    },\n    showComments: {\n      type: \"boolean\",\n      displayName: \"Comments\",\n      description: \"Show/Hide the comments\",\n      defaultValue: false,\n    },\n  },\n};\n\nexport function SoundCloud({\n  className,\n  url,\n  autoPlay,\n  color,\n  showComments,\n  showRelated,\n  showTeaser,\n  showUser,\n  visual,\n}: SoundCloudProps) {\n  \n const inEditor = usePlasmicCanvasContext();\n \n const play = inEditor ? false: autoPlay\n const query = new URL(url)\n  const parameters = new URLSearchParams(query.search);\n  parameters.set(\"url\", encodeURIComponent(url));\n  parameters.set(\"show_comments\", showComments.toString());\n  parameters.set(\"show_user\", showUser.toString());\n  parameters.set(\"visual\", visual.toString());\n  parameters.set(\"auto_play\", play.toString());\n  parameters.set(\"show_teaser\", showTeaser.toString());\n  parameters.set(\"hide_related\", (!showRelated).toString());\n  parameters.set(\"color\", color.toString());\n\n  return (\n    <iframe   \n      frameBorder=\"0\"\n      scrolling=\"no\"\n      width=\"600px\"\n      height=\"400px\"\n      src={`https://w.soundcloud.com/player?${parameters.toString()}`}\n      allow=\"autoplay\"\n      className={className}\n      /> \n\n  );\n}\n","import registerComponent, {\n  ComponentMeta,\n} from \"@plasmicapp/host/registerComponent\";\nimport registerGlobalContext from \"@plasmicapp/host/registerGlobalContext\";\nimport {\n  SoundCloud,\n  SoundCloudMeta,\n} from \"./soundcloud\";\n\n\nexport function registerAll(loader?: {\n  registerComponent: typeof registerComponent;\n  registerGlobalContext: typeof registerGlobalContext;\n}) {\n  const _registerComponent = <T extends React.ComponentType<any>>(\n    Component: T,\n    defaultMeta: ComponentMeta<React.ComponentProps<T>>\n  ) => {\n    if (loader) {\n      loader.registerComponent(Component, defaultMeta);\n    } else {\n      registerComponent(Component, defaultMeta);\n    }\n  };\n\n  if (loader) {\n    _registerComponent(SoundCloud, SoundCloudMeta);\n  }\n}\n\nexport * from \"./soundcloud\";"],"names":["SoundCloudMeta","name","displayName","importName","importPath","providesData","description","props","url","type","defaultValue","visual","autoPlay","color","noDeref","showUser","showRelated","showTeaser","showComments","SoundCloud","className","play","usePlasmicCanvasContext","query","URL","parameters","URLSearchParams","search","set","encodeURIComponent","toString","React","frameBorder","scrolling","width","height","src","allow","x","Error","loader","Component","defaultMeta","registerComponent"],"mappings":"qPA2BaA,EAAiD,CAC5DC,KAAM,aACNC,YAAa,aACbC,WAAY,aACZC,WAlBiB,kCAmBjBC,cAAc,EACdC,YAAa,oBACbC,MAAO,CACLC,IAAK,CACHC,KAAM,SACNP,YAAa,MACbI,YAAa,YACbI,aACE,2FAEJC,OAAQ,CACNF,KAAM,UACNP,YAAa,SACbI,YAAa,2BACbI,cAAa,GAEfE,SAAU,CACRH,KAAM,UACNP,YAAa,WACbI,YAAa,iBACbI,cAAc,GAEhBG,MAAO,CACLJ,KAAM,QACNP,YAAa,QACbI,YAAa,uCACbQ,SAAQ,GAEVC,SAAU,CACRN,KAAM,UACNP,YAAa,SACbI,YAAa,8BACbI,cAAc,GAEhBM,YAAa,CACXP,KAAM,UACNP,YAAa,UACbI,YAAa,0BACbI,cAAc,GAEhBO,WAAY,CACVR,KAAM,UACNP,YAAa,SACbI,YAAa,uBACbI,cAAc,GAEhBQ,aAAc,CACZT,KAAM,UACNP,YAAa,WACbI,YAAa,yBACbI,cAAc,cAKJS,SACdC,IAAAA,UACAZ,IAAAA,IACAI,IAAAA,SACAC,IAAAA,MACAK,IAAAA,aACAF,IAAAA,YACAC,IAAAA,WACAF,IAAAA,SACAJ,IAAAA,OAKKU,GAFWC,6BAEcV,EACzBW,EAAQ,IAAIC,IAAIhB,GACfiB,EAAa,IAAIC,gBAAgBH,EAAMI,eAC7CF,EAAWG,IAAI,MAAOC,mBAAmBrB,IACzCiB,EAAWG,IAAI,gBAAiBV,EAAaY,YAC7CL,EAAWG,IAAI,YAAab,EAASe,YACrCL,EAAWG,IAAI,SAAUjB,EAAOmB,YAChCL,EAAWG,IAAI,YAAaP,EAAKS,YACjCL,EAAWG,IAAI,cAAeX,EAAWa,YACzCL,EAAWG,IAAI,iBAAkBZ,GAAac,YAC9CL,EAAWG,IAAI,QAASf,EAAMiB,YAG5BC,0BACEC,YAAY,IACZC,UAAU,KACVC,MAAM,QACNC,OAAO,QACPC,uCAAwCX,EAAWK,WACnDO,MAAM,WACNjB,UAAWA,0EArHSkB,MACpBA,MAAAA,QAEI,IAAIC,oDAEHD,gCCCiBE,OAKxBC,EACAC,EASEF,IAVFC,EAWmBtB,EAVnBuB,EAU+B1C,EAR3BwC,EACFA,EAAOG,kBAAkBF,EAAWC,GAEpCC,EAAkBF,EAAWC"}